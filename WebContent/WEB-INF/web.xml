<?xml version="1.0" encoding="UTF-8"?>
<!-- 배치서술자 web.xml  -->
<!-- 
	web.xml파일은 배치서술자(Deployment Descriptor)로 웹 어플리케이션의 구성을 정의하는 XML파일이다.
	web.xml파일은 웹 애플리케이션의 구성요소, 서블릿 매핑, 필터 및 리스너 등의 설정을 정의할 수 있다.
	※ 웹 애플리케이션 주요 설정
	1. 서블릿 매핑 
		: 각 서블릿과 URL간의 매핑을 정의한다. 클라이언트가 특정 URL로 요청했을 때 서블릿이 매핑된 URL로 응답할 수 있다.
	2. 리스너와 필터 설정
		: 리스너와 필터를 등록하고 설정한다.
		: 리스너는 웹 애플리케이션의 상태를 감지하고 반응할 수 있는 인터페이스를 구현한다.
		: 필터는 '클라이언트의 요청이 서블릿에 도달하기 전' 요청이나 응답을 변경 및 수정할 수 있다.
	3. 에러 페이지 설정
		: 서블릿 컨테이너가 발생시키는 오류에 대한 사용자 정의 에러 페이지를 지정하여 응답할 수 있다.
		: 이를 통해 사용자에게 더 나은 사용자경험(UX)을 제공할 수 있다.
	4. 세션설정
		: 무상태 프로토콜인 HTTP의 단점을 보완하여 상태를 유지할 수 있는 세션에 대한 설정을 할 수 있다.
		: 세션의 타임아웃 등 라이프 사이클 및 기타 속성등을 설정할 수 있다.
	5. 컨텍스트 파라미터 설정
		: 웹 애플리케이션 전체에서 사용할 컨텍스트 파라미터를 정의할 수 있다.
		: 이를 통해 애플리케이션 전체에서 공통적으로 사용되는 환경 변수나 설정 값등을 설정할 수 있다.
		: 데이터베이스 연결 정보, 로깅 레벨, 시스템 경로 등..(전역 설정)
 -->
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" id="WebApp_ID" version="3.1">
	<display-name>study_jsp</display-name>
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.jsp</welcome-file>
		<welcome-file>default.htm</welcome-file>
	</welcome-file-list>
	
	<!-- Filter 설정 -->
	<!-- Filter 구현 후 web.xml에서 Filter에 대한 설정을 해주어야한다. -->
	<!-- Filter는 Request가 URL매핑되기 전에 호출되어 필터링이 수행된다. -->
	<filter>
		<filter-name>EncodingFilter</filter-name>
		<filter-class>com.servlet.filter.EncodingFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>EncodingFilter</filter-name>
		<!-- 모든 요청에 대한 필터링  -->
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- context-param : 웹 애플리케이션 전체에 대한 설정을 정의할 때 사용한다.-->
	<!-- 모든 서블릿에서 공유되고 사용이 가능하다.-->
	<!-- context-param은 DB연결정보, 이미지 업로드경로 설정, 서버IP설정 등 전역적으로 사용되는 공통 설정을 정의하는데 주로 사용된다. -->
	<context-param>
		<param-name>imgDir</param-name>
		<param-value>/upload/img</param-value>
	</context-param>
	<context-param>
		<param-name>testServer</param-name>
		<param-value>127.0.0.1</param-value>
	</context-param>
	<context-param>
		<param-name>realServer</param-name>
		<param-value>68.0.30.1</param-value>
	</context-param>
	
	<!-- Servlet Class를 이용한 맵핑  -->
	<servlet>
		<servlet-name>HelloServlet</servlet-name>
		<servlet-class>com.servlet.HelloServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>HelloServlet</servlet-name>
		<url-pattern>/hello1</url-pattern>
	</servlet-mapping>
	<!-- JSP파일을 이용한 맵핑, 잘 사용되지 않는 방식이다. -->
	<servlet>
		<servlet-name>JspImplicitObejctServlet</servlet-name>
		<jsp-file>/view/implicitObjects.jsp</jsp-file>
		<!-- init-param : 특정 서블릿에 대한 설정을 정의할 때 사용한다.-->
		<!-- 서블릿이 생성될 때 함께 생성된다.-->
		<!-- 각 서블릿 별로 정의하고 해당 서블릿의 Life-Cycle 동안만 사용된다. -->
		<init-param>
			<param-name>adminId</param-name>
			<param-value>admin</param-value>
		</init-param>
		<init-param>
			<param-name>adminPw</param-name>
			<param-value>1234</param-value>
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>JspImplicitObejctServlet</servlet-name>
		<url-pattern>/jspConfigObj</url-pattern>
	</servlet-mapping>
	
	<servlet>
		<servlet-name>ConfigParamServlet</servlet-name>
		<servlet-class>com.servlet.ConfigParamServlet</servlet-class>
		<init-param>
			<param-name>adminId</param-name>
			<param-value>admin</param-value>
		</init-param>
		<init-param>
			<param-name>adminPw</param-name>
			<param-value>1234</param-value>
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>ConfigParamServlet</servlet-name>
		<url-pattern>/ConfigParamServlet</url-pattern>
	</servlet-mapping>
</web-app>